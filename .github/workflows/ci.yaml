name: ci/cd

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  ENVIRONMENT: ${{ (github.head_ref || github.ref_name) == 'main' && 'production' || 'preview' }}

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Run linting
        run: pnpm lint

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Build application
        run: pnpm build

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Run type checking
        run: pnpm tsc --noEmit

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
      - name: Run unit tests with coverage
        run: pnpm test:unit

  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Playwright
        uses: ./.github/actions/setup-playwright
      - name: Run integration tests
        run: pnpm test:integration
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  visual-regression-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Playwright
        uses: ./.github/actions/setup-playwright
      - name: Run visual regression tests
        id: visual-tests
        run: pnpm test:visual-regression
        continue-on-error: true
      - name: Check for visual differences
        id: check-diff
        run: |
          if [ -d "test-results" ] && [ "$(find test-results -name "*-diff.png" | wc -l)" -gt 0 ]; then
            echo "differences=true" >> $GITHUB_OUTPUT
          else
            echo "differences=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload individual screenshots
        if: steps.check-diff.outputs.differences == 'true'
        run: |
          # Upload each screenshot as individual artifacts using GitHub CLI
          for diff_file in $(find test-results -name "*-diff.png" 2>/dev/null || true); do
            if [ -f "$diff_file" ]; then
              base_name=$(basename "$diff_file" -diff.png)
              dir_name=$(dirname "$diff_file")
              expected_file="$dir_name/$base_name-expected.png"
              actual_file="$dir_name/$base_name-actual.png"
              
              # Create individual artifact uploads
              if [ -f "$expected_file" ]; then
                gh run upload-artifact "$base_name-expected" "$expected_file" || true
              fi
              if [ -f "$actual_file" ]; then
                gh run upload-artifact "$base_name-actual" "$actual_file" || true
              fi
              if [ -f "$diff_file" ]; then
                gh run upload-artifact "$base_name-diff" "$diff_file" || true
              fi
            fi
          done
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Generate comment with image links
        id: generate-comment
        if: steps.check-diff.outputs.differences == 'true'
        run: |
          {
            echo "image_comparisons<<SCREENSHOT_EOF"
            
            for diff_file in $(find test-results -name "*-diff.png" 2>/dev/null || true); do
              if [ -f "$diff_file" ]; then
                base_name=$(basename "$diff_file" -diff.png)
                
                echo "### 🔍 $base_name"
                echo ""
                echo "**Download Links:**"
                echo "- [Expected](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (artifact: \`$base_name-expected\`)"
                echo "- [Actual](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (artifact: \`$base_name-actual\`)"
                echo "- [Diff](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) (artifact: \`$base_name-diff\`)"
                echo ""
              fi
            done
            
            echo "SCREENSHOT_EOF"
          } >> $GITHUB_OUTPUT
      - name: Comment PR with visual regression results
        if: steps.check-diff.outputs.differences == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: visual-regression-results
          message: |
            ## 📸 Visual Regression Differences Detected

            Visual differences were found in the screenshot tests:

            ${{ steps.generate-comment.outputs.image_comparisons }}

            **📎 All Artifacts**: [View all artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            <details>
            <summary>How to update baselines if changes are intentional</summary>

            ```bash
            pnpm test:visual-regression:fix
            ```
            </details>

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, build, typecheck, unit-test, integration-test]
    environment: ${{ (github.head_ref || github.ref_name) == 'main' && 'production' || 'preview' }}

    steps:
      - name: Determine environment
        run: echo "Deploying to ${{ env.ENVIRONMENT }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ env.ENVIRONMENT }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy production
        if: env.ENVIRONMENT == 'production'
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy preview
        if: env.ENVIRONMENT == 'preview'
        run: |
          PREVIEW_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV

      - name: Comment PR with preview URL
        if: env.ENVIRONMENT == 'preview'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            🚀 **Preview deployment ready!**

            📎 **Preview URL**: ${{ env.PREVIEW_URL }}
